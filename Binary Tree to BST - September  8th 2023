//C++

class Solution{
  public:
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void inorder(Node *root, vector<int> &node){
        if(root == NULL) return;
        
        inorder(root->left, node);
        node.push_back(root->data);
        inorder(root->right, node);
        
    }
    
    Node* converttoBST(int start, int end, vector<int> &node){
        if(start > end) return NULL;
        
        int mid = start + (end-start)/2;
        Node *newNode = new Node(node[mid]);
        
        newNode->left = converttoBST(start, mid-1, node);
        newNode->right = converttoBST(mid+1, end, node);
        
        return newNode;
    }
    
    Node *binaryTreeToBST (Node *root)
    {
        vector<int> node;
        inorder(root, node);
        
        sort(node.begin(),node.end());
        
        return converttoBST(0, node.size()-1, node);
    }
};
